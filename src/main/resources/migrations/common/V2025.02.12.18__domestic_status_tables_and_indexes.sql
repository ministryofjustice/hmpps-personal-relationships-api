-----------------------------------------------------------------------------------
-- Prisoner Domestic Status Schema
-- Description: Tables to manage and track prisoner domestic status information
-- Version: 1.0
-----------------------------------------------------------------------------------


-- Insert domestic status reference codes


--
-- Main table for current domestic status
--
CREATE TABLE prisoner_domestic_status
(
    id                   int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prisoner_reference   VARCHAR(50)              NOT NULL,
    domestic_status_code VARCHAR(40)              NOT NULL,
    created_by           VARCHAR(50)              NOT NULL,
    created_time         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_by           VARCHAR(50)              NOT NULL,
    updated_time         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    version              INTEGER                  NOT NULL DEFAULT 1,

    CONSTRAINT uk_prisoner_reference UNIQUE (prisoner_reference)
);

--
-- History table for tracking all domestic status changes
--
CREATE TABLE prisoner_domestic_status_history
(
    history_id           BIGSERIAL PRIMARY KEY,
    prisoner_reference   VARCHAR(50)              NOT NULL,
    domestic_status_code VARCHAR(40)              NOT NULL,
    created_by           VARCHAR(50)              NOT NULL,
    created_time         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    version              INTEGER                  NOT NULL

);

-- Create indexes
CREATE INDEX idx_prisoner_reference ON prisoner_domestic_status_history (prisoner_reference);
CREATE INDEX idx_created_time ON prisoner_domestic_status_history (created_time);
CREATE INDEX idx_domestic_status_code ON prisoner_domestic_status (domestic_status_code);
CREATE INDEX idx_history_domestic_status_code ON prisoner_domestic_status_history (domestic_status_code);

--
-- Function to maintain history records and handle updates
--
CREATE OR REPLACE FUNCTION process_prisoner_domestic_status_change()
    RETURNS TRIGGER AS
$$
BEGIN
    -- Only create history record if status has changed
    IF OLD.domestic_status_code != NEW.domestic_status_code THEN
        INSERT INTO prisoner_domestic_status_history (prisoner_reference,
                                                      domestic_status_code,
                                                      created_by,
                                                      version)
        VALUES (OLD.prisoner_reference,
                OLD.domestic_status_code,
                NEW.updated_by,
                OLD.version);
    END IF;

    -- Update the timestamp and version
    NEW.updated_time = CURRENT_TIMESTAMP;
    NEW.version = OLD.version + 1;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_prisoner_domestic_status_change
    BEFORE UPDATE
    ON prisoner_domestic_status
    FOR EACH ROW
EXECUTE FUNCTION process_prisoner_domestic_status_change();

--
-- Function to update domestic status with optimistic locking
--
CREATE OR REPLACE FUNCTION update_prisoner_domestic_status(
    p_prisoner_reference VARCHAR,
    p_new_status_code VARCHAR,
    p_user_id VARCHAR,
    p_expected_version INTEGER
) RETURNS BOOLEAN AS
$$
DECLARE
    rows_affected INTEGER;
BEGIN
    -- Verify the status code exists in reference_codes
    IF NOT EXISTS (SELECT 1
                   FROM reference_codes
                   WHERE code = p_new_status_code
                     AND group_code = 'MARITAL_STAT') THEN
        RAISE EXCEPTION 'Invalid domestic status code: %', p_new_status_code;
    END IF;

    UPDATE prisoner_domestic_status
    SET domestic_status_code = p_new_status_code,
        updated_by           = p_user_id
    WHERE prisoner_reference = p_prisoner_reference
      AND version = p_expected_version;

    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    RETURN rows_affected > 0;
END;
$$ LANGUAGE plpgsql;
